\cancel mode verify
! get_datavar.jnl  
!
!  1/2007 ACM
! 12/2013 ACM Extend to grids with E and F axes
!
! Issues a command to SAVE/FILE=$1/CLOBBER data from variable in dataset according 
! to indices and strides given as arguments. Assumes the dataset has already been opened.
!
! arguments:  1 output file name
!             2 dataset URL
!             3 variable name (data variable)
!             4 the shape of the request, some subset of  IJKLMN
!             5, 6, 7  low index, high index, stride for first dimension
!             8, 9,10  low index, high index, stride for second dimension
!            11,12,13  low index, high index, stride for third dimension
!            14,15,16  low index, high index, stride for fourth dimension
!
! After this script is run, the value of the Ferret symbol $fer_last_error contains 
! an error string if an unexpected error was encountered.

!set mem/siz=300

! Save the dataset number of the current dataset
SET DATA/SAVE

! The IOSP will supply an integer value for this argument.
SET DATA ($2)

! Write output in original upper-or lower-case spelling of variables
! and axis names

CANCEL MODE UPCASE

! Place the inputs into variables for later convenience. Any that are not
! defined are arbitrarily given the value 1.

LET lo_index_1 = $5"1"
LET hi_index_1 = $6"1"
LET stride_1 = $7"1"

LET lo_index_2 = $8"1"
LET hi_index_2 = $9"1"
LET stride_2 = $10"1"

LET lo_index_3 = $11"1"
LET hi_index_3 = ($12"1")
LET stride_3 = ($13"1")

LET lo_index_4 = ($14"1")
LET hi_index_4 = ($15"1")
LET stride_4 = ($16"1")

LET lo_index_5 = ($17"1")
LET hi_index_5 = ($18"1")
LET stride_5 = ($19"1")

LET lo_index_6 = ($20"1")
LET hi_index_6 = ($21"1")
LET stride_6 = ($22"1")

! Get the shape e.g. IJL. Use this to generate the indices required

DEFINE SYMBOL shape = `UPCASE("($4"NONE")")`

! IF there are no axes, a purely scalar variable, just write it and exit.

IF ($shape"0|NONE>1|*>0") THEN
   SAVE/FILE="$1"/OUTTYPE=float/CLOBBER $3
   EXIT/SCRIPT
ENDIF

LET count = 0
DEFINE SYMBOL mdim = `count`

IF `STRINDEX("($shape)", "I") GT 0` THEN
!  There is an X axis. Add the I indices to the region spec.

   LET count = `count+1`
   DEFINE SYMBOL mdim = `count`

   DEFINE SYMBOL region_i i=`lo_index_($mdim)`:`hi_index_($mdim)`:`stride_($mdim)`
   DEFINE SYMBOL region_full = ($region_i)
   DEFINE SYMBOL comma = ,
ENDIF

IF `STRINDEX("($shape)", "J") GT 0` THEN
!  There is a Y axis. Add the J indices to the region spec.

   LET count = `count+1`
   DEFINE SYMBOL mdim = `count`

   DEFINE SYMBOL region_j j=`lo_index_($mdim)`:`hi_index_($mdim)`:`stride_($mdim)`
   DEFINE SYMBOL region_full = ($region_i)($comma)($region_j)
   DEFINE SYMBOL comma = ,
ENDIF

IF `STRINDEX("($shape)", "K") GT 0` THEN
!  There is a Z axis. Add the K indices to the region spec.

   LET count = `count+1`
   DEFINE SYMBOL mdim = `count`

   DEFINE SYMBOL region_k k=`lo_index_($mdim)`:`hi_index_($mdim)`:`stride_($mdim)`
   DEFINE SYMBOL region_full = ($region_full)($comma)($region_k)
   DEFINE SYMBOL comma = ,
ENDIF

IF `STRINDEX("($shape)", "L") GT 0` THEN
!  There is a T axis. Add the T indices to the region spec.

   LET count = `count+1`
   DEFINE SYMBOL mdim = `count`

   DEFINE SYMBOL region_l l=`lo_index_($mdim)`:`hi_index_($mdim)`:`stride_($mdim)`
   DEFINE SYMBOL region_full = ($region_full)($comma)($region_l)
   DEFINE SYMBOL comma = ,

ENDIF

IF `STRINDEX("($shape)", "M") GT 0` THEN
!  There is an E axis. Add the E indices to the region spec.

   LET count = `count+1`
   DEFINE SYMBOL mdim = `count`

   DEFINE SYMBOL region_m m=`lo_index_($mdim)`:`hi_index_($mdim)`:`stride_($mdim)`
   DEFINE SYMBOL region_full = ($region_full)($comma)($region_m)
   DEFINE SYMBOL comma = ,

ENDIF

IF `STRINDEX("($shape)", "N") GT 0` THEN
!  There is an F axis. Add the F indices to the region spec.

   LET count = `count+1`
   DEFINE SYMBOL mdim = `count`

   DEFINE SYMBOL region_n n=`lo_index_($mdim)`:`hi_index_($mdim)`:`stride_($mdim)`
   DEFINE SYMBOL region_full = ($region_full)($comma)($region_n)
   DEFINE SYMBOL comma = ,

ENDIF

! If the variable has no missing or _FillValue attribute, Ferret assumes it is NaN.
! Set the variable that the F-TDS var is based on, to handle the Ferret default
! missing flag.

! If the variable is type CHAR, just write it.

LET is_numeric = 1
LET attnames = ($3).attnames 

! These attributes are available for a transformed variable.
IF `IS_ELEMENT_OF_STR_N(attnames, "ferret_datatype") NE 0` THEN
  DEFINE SYMBOL data_type = `($3).ferret_datatype`
ELIF `IS_ELEMENT_OF_STR_N(attnames, "infile_datatype") NE 0` THEN
  DEFINE SYMBOL data_type = `($3).ferret_datatype`
ELSE
! If those attributes dont exist then it's not an FTDS dataset, and 
! we can get the data type from the file safely.
   DEFINE SYMBOL data_type = `$3[($region_full)],return=dtype`
ENDIF
   
LET is_numeric = `(STRCMP("($data_type)", "CHAR") NE 0) AND (STRCMP("($data_type)", "STRING") NE 0)`

IF `is_numeric` THEN

   LET attlist = ($3).attnames
   IF `IS_ELEMENT_OF_STR(attlist,{"missing_value","_FillValue"} ) EQ 0` THEN

      DEFINE SYMBOL base_name = $3
      LET loc_regrid = STRINDEX("($3)", "_1_regrid")
      LET loc_transf = STRINDEX("($3)", "_1_transformed")
      IF `loc_regrid GT 0` THEN DEFINE SYMBOL base_name = `SUBSTRING("($3)", 1, loc_regrid-1)`
      IF `loc_transf GT 0` THEN DEFINE SYMBOL base_name = `SUBSTRING("($3)", 1, loc_transf-1)`
      SET VAR/NAME=temporary_get_datavar ($base_name)
      LET/D=($2) ($base_name) = IF temporary_get_datavar GT -9.e33 THEN temporary_get_datavar
      DEFINE ALIAS ATTRCMD SET ATT/LIKE=
      ATTRCMD temporary_get_datavar ($base_name)
   ENDIF
   
   SET VAR/OUTTYPE=float $3

ENDIF

! All the region information has been gathered. Now write the file.  


SAVE/FILE="$1"/CLOBBER $3[($region_full)]

! Done writing data variable. Clean up.
SET DATA/RESTORE
EXIT/SCRIPT
