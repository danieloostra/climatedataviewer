	public static Catalog getCatalog(int catalogId) throws Exception{

		Catalog catalog = null;
		Hashtable<String, String> hash = getObject("catalog", catalogId);
		Datavalue cleanCatalogId = new Datavalue(hash.get("cleanCatalogId"));
		Datavalue base = new Datavalue(hash.get("base"));
		Datavalue expires = new Datavalue(hash.get("expires"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue version = new Datavalue(hash.get("version"));
		Datavalue xmlns = new Datavalue(hash.get("xmlns"));
		Datavalue status = new Datavalue(hash.get("status"));
		catalog = new Catalog(catalogId, cleanCatalogId, base, expires, name, version, xmlns, status);
		return catalog;
	}
	public static ArrayList<Dataset> getDatasetBCatalog(int catalogId) throws Exception{
		ArrayList<Dataset> datasets = new ArrayList<Dataset>();
		ArrayList<Integer> datasetIds = getObjects("catalog_dataset", "catalog", "dataset", catalogId);
		for(int i=0; i<datasetIds.size(); i++){
			datasets.add(getDataset(datasetIds.get(i)));
		}
		return datasets;
	}
	public static CatalogProperty getCatalogProperty(int catalogPropertyId) throws Exception{

		CatalogProperty catalogProperty = null;
		Hashtable<String, String> hash = getObject("catalog_property", catalogPropertyId);
		int catalogId = Integer.parseInt(hash.get("catalog_id"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue value = new Datavalue(hash.get("value"));
		catalogProperty = new CatalogProperty(catalogId, catalogPropertyId, name, value);
		return catalogProperty;
	}
	public static ArrayList<CatalogProperty> getCatalogPropertyBCatalog(int catalogId) throws Exception{
		ArrayList<CatalogProperty> propertys = new ArrayList<CatalogProperty>();
		ArrayList<Integer> propertyIds = getObjects("catalog_property", "catalog", catalogId);
		for(int i=0; i<propertyIds.size(); i++){
			propertys.add(getCatalogProperty(propertyIds.get(i)));
		}
		return propertys;
	}
	public static ArrayList<Service> getServiceBCatalog(int catalogId) throws Exception{
		ArrayList<Service> services = new ArrayList<Service>();
		ArrayList<Integer> serviceIds = getObjects("catalog_service", "catalog", "service", catalogId);
		for(int i=0; i<serviceIds.size(); i++){
			services.add(getService(serviceIds.get(i)));
		}
		return services;
	}
	public static CatalogXlink getCatalogXlink(int catalogXlinkId) throws Exception{

		CatalogXlink catalogXlink = null;
		Hashtable<String, String> hash = getObject("catalog_xlink", catalogXlinkId);
		int catalogId = Integer.parseInt(hash.get("catalog_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue xlink = new Datavalue(hash.get("xlink"));
		if (xlink.isNull())
			xlink = new Datavalue(hash.get("xlink_nonstandard"));
		catalogXlink = new CatalogXlink(catalogId, catalogXlinkId, value, xlink);
		return catalogXlink;
	}
	public static ArrayList<CatalogXlink> getCatalogXlinkBCatalog(int catalogId) throws Exception{
		ArrayList<CatalogXlink> xlinks = new ArrayList<CatalogXlink>();
		ArrayList<Integer> xlinkIds = getObjects("catalog_xlink", "catalog", catalogId);
		for(int i=0; i<xlinkIds.size(); i++){
			xlinks.add(getCatalogXlink(xlinkIds.get(i)));
		}
		return xlinks;
	}
	public static Catalogref getCatalogref(int catalogrefId) throws Exception{

		Catalogref catalogref = null;
		Hashtable<String, String> hash = getObject("catalogref", catalogrefId);
		catalogref = new Catalogref(catalogrefId);
		return catalogref;
	}
	public static CatalogrefDocumentation getCatalogrefDocumentation(int catalogrefDocumentationId) throws Exception{

		CatalogrefDocumentation catalogrefDocumentation = null;
		Hashtable<String, String> hash = getObject("catalogref_documentation", catalogrefDocumentationId);
		int catalogrefId = Integer.parseInt(hash.get("catalogref_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue documentationenum = new Datavalue(hash.get("documentationenum"));
		if (documentationenum.isNull())
			documentationenum = new Datavalue(hash.get("documentationenum_nonstandard"));
		catalogrefDocumentation = new CatalogrefDocumentation(catalogrefId, catalogrefDocumentationId, value, documentationenum);
		return catalogrefDocumentation;
	}
	public static ArrayList<CatalogrefDocumentation> getCatalogrefDocumentationBCatalogref(int catalogrefId) throws Exception{
		ArrayList<CatalogrefDocumentation> documentations = new ArrayList<CatalogrefDocumentation>();
		ArrayList<Integer> documentationIds = getObjects("catalogref_documentation", "catalogref", catalogrefId);
		for(int i=0; i<documentationIds.size(); i++){
			documentations.add(getCatalogrefDocumentation(documentationIds.get(i)));
		}
		return documentations;
	}
	public static CatalogrefDocumentationNamespace getCatalogrefDocumentationNamespace(int catalogrefDocumentationNamespaceId) throws Exception{

		CatalogrefDocumentationNamespace catalogrefDocumentationNamespace = null;
		Hashtable<String, String> hash = getObject("catalogref_documentation_namespace", catalogrefDocumentationNamespaceId);
		int catalogrefDocumentationId = Integer.parseInt(hash.get("catalogref_documentation_id"));
		Datavalue namespace = new Datavalue(hash.get("namespace"));
		catalogrefDocumentationNamespace = new CatalogrefDocumentationNamespace(catalogrefDocumentationId, catalogrefDocumentationNamespaceId, namespace);
		return catalogrefDocumentationNamespace;
	}
	public static ArrayList<CatalogrefDocumentationNamespace> getCatalogrefDocumentationNamespaceBCatalogrefDocumentation(int catalogrefDocumentationId) throws Exception{
		ArrayList<CatalogrefDocumentationNamespace> namespaces = new ArrayList<CatalogrefDocumentationNamespace>();
		ArrayList<Integer> namespaceIds = getObjects("catalogref_documentation_namespace", "catalogref_documentation", catalogrefDocumentationId);
		for(int i=0; i<namespaceIds.size(); i++){
			namespaces.add(getCatalogrefDocumentationNamespace(namespaceIds.get(i)));
		}
		return namespaces;
	}
	public static CatalogrefDocumentationXlink getCatalogrefDocumentationXlink(int catalogrefDocumentationXlinkId) throws Exception{

		CatalogrefDocumentationXlink catalogrefDocumentationXlink = null;
		Hashtable<String, String> hash = getObject("catalogref_documentation_xlink", catalogrefDocumentationXlinkId);
		int catalogrefDocumentationId = Integer.parseInt(hash.get("catalogref_documentation_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue xlink = new Datavalue(hash.get("xlink"));
		if (xlink.isNull())
			xlink = new Datavalue(hash.get("xlink_nonstandard"));
		catalogrefDocumentationXlink = new CatalogrefDocumentationXlink(catalogrefDocumentationId, catalogrefDocumentationXlinkId, value, xlink);
		return catalogrefDocumentationXlink;
	}
	public static ArrayList<CatalogrefDocumentationXlink> getCatalogrefDocumentationXlinkBCatalogrefDocumentation(int catalogrefDocumentationId) throws Exception{
		ArrayList<CatalogrefDocumentationXlink> xlinks = new ArrayList<CatalogrefDocumentationXlink>();
		ArrayList<Integer> xlinkIds = getObjects("catalogref_documentation_xlink", "catalogref_documentation", catalogrefDocumentationId);
		for(int i=0; i<xlinkIds.size(); i++){
			xlinks.add(getCatalogrefDocumentationXlink(xlinkIds.get(i)));
		}
		return xlinks;
	}
	public static CatalogrefXlink getCatalogrefXlink(int catalogrefXlinkId) throws Exception{

		CatalogrefXlink catalogrefXlink = null;
		Hashtable<String, String> hash = getObject("catalogref_xlink", catalogrefXlinkId);
		int catalogrefId = Integer.parseInt(hash.get("catalogref_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue xlink = new Datavalue(hash.get("xlink"));
		if (xlink.isNull())
			xlink = new Datavalue(hash.get("xlink_nonstandard"));
		catalogrefXlink = new CatalogrefXlink(catalogrefId, catalogrefXlinkId, value, xlink);
		return catalogrefXlink;
	}
	public static ArrayList<CatalogrefXlink> getCatalogrefXlinkBCatalogref(int catalogrefId) throws Exception{
		ArrayList<CatalogrefXlink> xlinks = new ArrayList<CatalogrefXlink>();
		ArrayList<Integer> xlinkIds = getObjects("catalogref_xlink", "catalogref", catalogrefId);
		for(int i=0; i<xlinkIds.size(); i++){
			xlinks.add(getCatalogrefXlink(xlinkIds.get(i)));
		}
		return xlinks;
	}
	public static Dataset getDataset(int datasetId) throws Exception{

		Dataset dataset = null;
		Hashtable<String, String> hash = getObject("dataset", datasetId);
		Datavalue alias = new Datavalue(hash.get("alias"));
		Datavalue authority = new Datavalue(hash.get("authority"));
		Datavalue dId = new Datavalue(hash.get("d_id"));
		Datavalue harvest = new Datavalue(hash.get("harvest"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue resourcecontrol = new Datavalue(hash.get("resourcecontrol"));
		Datavalue serviceName = new Datavalue(hash.get("serviceName"));
		Datavalue urlPath = new Datavalue(hash.get("urlPath"));
		Datavalue collectiontype = new Datavalue(hash.get("collectiontype"));
		if (collectiontype.isNull())
			collectiontype = new Datavalue(hash.get("collectiontype_nonstandard"));
		Datavalue datasizeUnit = new Datavalue(hash.get("datasize_unit"));
		if (datasizeUnit.isNull())
			datasizeUnit = new Datavalue(hash.get("datasize_unit_nonstandard"));
		Datavalue dataType = new Datavalue(hash.get("dataType"));
		if (dataType.isNull())
			dataType = new Datavalue(hash.get("dataType_nonstandard"));
		Datavalue status = new Datavalue(hash.get("status"));
		dataset = new Dataset(datasetId, alias, authority, dId, harvest, name, resourcecontrol, serviceName, urlPath, collectiontype, datasizeUnit, dataType, status);
		return dataset;
	}
	public static DatasetAccess getDatasetAccess(int datasetAccessId) throws Exception{

		DatasetAccess datasetAccess = null;
		Hashtable<String, String> hash = getObject("dataset_access", datasetAccessId);
		int datasetId = Integer.parseInt(hash.get("dataset_id"));
		Datavalue servicename = new Datavalue(hash.get("servicename"));
		Datavalue urlpath = new Datavalue(hash.get("urlpath"));
		Datavalue dataformat = new Datavalue(hash.get("dataformat"));
		if (dataformat.isNull())
			dataformat = new Datavalue(hash.get("dataformat_nonstandard"));
		datasetAccess = new DatasetAccess(datasetId, datasetAccessId, servicename, urlpath, dataformat);
		return datasetAccess;
	}
	public static ArrayList<DatasetAccess> getDatasetAccessBDataset(int datasetId) throws Exception{
		ArrayList<DatasetAccess> accesss = new ArrayList<DatasetAccess>();
		ArrayList<Integer> accessIds = getObjects("dataset_access", "dataset", datasetId);
		for(int i=0; i<accessIds.size(); i++){
			accesss.add(getDatasetAccess(accessIds.get(i)));
		}
		return accesss;
	}
	public static DatasetAccessDatasize getDatasetAccessDatasize(int datasetAccessDatasizeId) throws Exception{

		DatasetAccessDatasize datasetAccessDatasize = null;
		Hashtable<String, String> hash = getObject("dataset_access_datasize", datasetAccessDatasizeId);
		int datasetAccessId = Integer.parseInt(hash.get("dataset_access_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue units = new Datavalue(hash.get("units"));
		if (units.isNull())
			units = new Datavalue(hash.get("units_nonstandard"));
		datasetAccessDatasize = new DatasetAccessDatasize(datasetAccessId, datasetAccessDatasizeId, value, units);
		return datasetAccessDatasize;
	}
	public static ArrayList<DatasetAccessDatasize> getDatasetAccessDatasizeBDatasetAccess(int datasetAccessId) throws Exception{
		ArrayList<DatasetAccessDatasize> datasizes = new ArrayList<DatasetAccessDatasize>();
		ArrayList<Integer> datasizeIds = getObjects("dataset_access_datasize", "dataset_access", datasetAccessId);
		for(int i=0; i<datasizeIds.size(); i++){
			datasizes.add(getDatasetAccessDatasize(datasizeIds.get(i)));
		}
		return datasizes;
	}
	public static ArrayList<Catalogref> getCatalogrefBDataset(int datasetId) throws Exception{
		ArrayList<Catalogref> catalogrefs = new ArrayList<Catalogref>();
		ArrayList<Integer> catalogrefIds = getObjects("dataset_catalogref", "dataset", "catalogref", datasetId);
		for(int i=0; i<catalogrefIds.size(); i++){
			catalogrefs.add(getCatalogref(catalogrefIds.get(i)));
		}
		return catalogrefs;
	}
	public static ArrayList<Dataset> getDatasetBDataset(int parentId) throws Exception{
		ArrayList<Dataset> datasets = new ArrayList<Dataset>();
		ArrayList<Integer> childIds = getObjects("dataset_dataset", "parent", "child", parentId);
		for(int i=0; i<childIds.size(); i++){
			datasets.add(getDataset(childIds.get(i)));
		}
		return datasets;
	}
	public static DatasetNcml getDatasetNcml(int datasetNcmlId) throws Exception{

		DatasetNcml datasetNcml = null;
		Hashtable<String, String> hash = getObject("dataset_ncml", datasetNcmlId);
		int datasetId = Integer.parseInt(hash.get("dataset_id"));
		datasetNcml = new DatasetNcml(datasetId, datasetNcmlId);
		return datasetNcml;
	}
	public static ArrayList<DatasetNcml> getDatasetNcmlBDataset(int datasetId) throws Exception{
		ArrayList<DatasetNcml> ncmls = new ArrayList<DatasetNcml>();
		ArrayList<Integer> ncmlIds = getObjects("dataset_ncml", "dataset", datasetId);
		for(int i=0; i<ncmlIds.size(); i++){
			ncmls.add(getDatasetNcml(ncmlIds.get(i)));
		}
		return ncmls;
	}
	public static DatasetProperty getDatasetProperty(int datasetPropertyId) throws Exception{

		DatasetProperty datasetProperty = null;
		Hashtable<String, String> hash = getObject("dataset_property", datasetPropertyId);
		int datasetId = Integer.parseInt(hash.get("dataset_id"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue value = new Datavalue(hash.get("value"));
		datasetProperty = new DatasetProperty(datasetId, datasetPropertyId, name, value);
		return datasetProperty;
	}
	public static ArrayList<DatasetProperty> getDatasetPropertyBDataset(int datasetId) throws Exception{
		ArrayList<DatasetProperty> propertys = new ArrayList<DatasetProperty>();
		ArrayList<Integer> propertyIds = getObjects("dataset_property", "dataset", datasetId);
		for(int i=0; i<propertyIds.size(); i++){
			propertys.add(getDatasetProperty(propertyIds.get(i)));
		}
		return propertys;
	}
	public static ArrayList<Service> getServiceBDataset(int datasetId) throws Exception{
		ArrayList<Service> services = new ArrayList<Service>();
		ArrayList<Integer> serviceIds = getObjects("dataset_service", "dataset", "service", datasetId);
		for(int i=0; i<serviceIds.size(); i++){
			services.add(getService(serviceIds.get(i)));
		}
		return services;
	}
	public static ArrayList<Tmg> getTmgBDataset(int datasetId) throws Exception{
		ArrayList<Tmg> tmgs = new ArrayList<Tmg>();
		ArrayList<Integer> tmgIds = getObjects("dataset_tmg", "dataset", "tmg", datasetId);
		for(int i=0; i<tmgIds.size(); i++){
			tmgs.add(getTmg(tmgIds.get(i)));
		}
		return tmgs;
	}
	public static Metadata getMetadata(int metadataId) throws Exception{

		Metadata metadata = null;
		Hashtable<String, String> hash = getObject("metadata", metadataId);
		Datavalue inherited = new Datavalue(hash.get("inherited"));
		if (inherited.isNull())
			inherited = new Datavalue(hash.get("inherited_nonstandard"));
		Datavalue metadatatype = new Datavalue(hash.get("metadatatype"));
		if (metadatatype.isNull())
			metadatatype = new Datavalue(hash.get("metadatatype_nonstandard"));
		metadata = new Metadata(metadataId, inherited, metadatatype);
		return metadata;
	}
	public static MetadataNamespace getMetadataNamespace(int metadataNamespaceId) throws Exception{

		MetadataNamespace metadataNamespace = null;
		Hashtable<String, String> hash = getObject("metadata_namespace", metadataNamespaceId);
		int metadataId = Integer.parseInt(hash.get("metadata_id"));
		Datavalue namespace = new Datavalue(hash.get("namespace"));
		metadataNamespace = new MetadataNamespace(metadataId, metadataNamespaceId, namespace);
		return metadataNamespace;
	}
	public static ArrayList<MetadataNamespace> getMetadataNamespaceBMetadata(int metadataId) throws Exception{
		ArrayList<MetadataNamespace> namespaces = new ArrayList<MetadataNamespace>();
		ArrayList<Integer> namespaceIds = getObjects("metadata_namespace", "metadata", metadataId);
		for(int i=0; i<namespaceIds.size(); i++){
			namespaces.add(getMetadataNamespace(namespaceIds.get(i)));
		}
		return namespaces;
	}
	public static ArrayList<Tmg> getTmgBMetadata(int metadataId) throws Exception{
		ArrayList<Tmg> tmgs = new ArrayList<Tmg>();
		ArrayList<Integer> tmgIds = getObjects("metadata_tmg", "metadata", "tmg", metadataId);
		for(int i=0; i<tmgIds.size(); i++){
			tmgs.add(getTmg(tmgIds.get(i)));
		}
		return tmgs;
	}
	public static MetadataXlink getMetadataXlink(int metadataXlinkId) throws Exception{

		MetadataXlink metadataXlink = null;
		Hashtable<String, String> hash = getObject("metadata_xlink", metadataXlinkId);
		int metadataId = Integer.parseInt(hash.get("metadata_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue xlink = new Datavalue(hash.get("xlink"));
		if (xlink.isNull())
			xlink = new Datavalue(hash.get("xlink_nonstandard"));
		metadataXlink = new MetadataXlink(metadataId, metadataXlinkId, value, xlink);
		return metadataXlink;
	}
	public static ArrayList<MetadataXlink> getMetadataXlinkBMetadata(int metadataId) throws Exception{
		ArrayList<MetadataXlink> xlinks = new ArrayList<MetadataXlink>();
		ArrayList<Integer> xlinkIds = getObjects("metadata_xlink", "metadata", metadataId);
		for(int i=0; i<xlinkIds.size(); i++){
			xlinks.add(getMetadataXlink(xlinkIds.get(i)));
		}
		return xlinks;
	}
	public static Service getService(int serviceId) throws Exception{

		Service service = null;
		Hashtable<String, String> hash = getObject("service", serviceId);
		Datavalue base = new Datavalue(hash.get("base"));
		Datavalue desc = new Datavalue(hash.get("desc"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue suffix = new Datavalue(hash.get("suffix"));
		Datavalue serviceType = new Datavalue(hash.get("serviceType"));
		if (serviceType.isNull())
			serviceType = new Datavalue(hash.get("serviceType_nonstandard"));
		Datavalue status = new Datavalue(hash.get("status"));
		service = new Service(serviceId, base, desc, name, suffix, serviceType, status);
		return service;
	}
	public static ServiceDatasetroot getServiceDatasetroot(int serviceDatasetrootId) throws Exception{

		ServiceDatasetroot serviceDatasetroot = null;
		Hashtable<String, String> hash = getObject("service_datasetroot", serviceDatasetrootId);
		int serviceId = Integer.parseInt(hash.get("service_id"));
		Datavalue location = new Datavalue(hash.get("location"));
		Datavalue path = new Datavalue(hash.get("path"));
		serviceDatasetroot = new ServiceDatasetroot(serviceId, serviceDatasetrootId, location, path);
		return serviceDatasetroot;
	}
	public static ArrayList<ServiceDatasetroot> getServiceDatasetrootBService(int serviceId) throws Exception{
		ArrayList<ServiceDatasetroot> datasetroots = new ArrayList<ServiceDatasetroot>();
		ArrayList<Integer> datasetrootIds = getObjects("service_datasetroot", "service", serviceId);
		for(int i=0; i<datasetrootIds.size(); i++){
			datasetroots.add(getServiceDatasetroot(datasetrootIds.get(i)));
		}
		return datasetroots;
	}
	public static ServiceProperty getServiceProperty(int servicePropertyId) throws Exception{

		ServiceProperty serviceProperty = null;
		Hashtable<String, String> hash = getObject("service_property", servicePropertyId);
		int serviceId = Integer.parseInt(hash.get("service_id"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue value = new Datavalue(hash.get("value"));
		serviceProperty = new ServiceProperty(serviceId, servicePropertyId, name, value);
		return serviceProperty;
	}
	public static ArrayList<ServiceProperty> getServicePropertyBService(int serviceId) throws Exception{
		ArrayList<ServiceProperty> propertys = new ArrayList<ServiceProperty>();
		ArrayList<Integer> propertyIds = getObjects("service_property", "service", serviceId);
		for(int i=0; i<propertyIds.size(); i++){
			propertys.add(getServiceProperty(propertyIds.get(i)));
		}
		return propertys;
	}
	public static ArrayList<Service> getServiceBService(int parentId) throws Exception{
		ArrayList<Service> services = new ArrayList<Service>();
		ArrayList<Integer> childIds = getObjects("service_service", "parent", "child", parentId);
		for(int i=0; i<childIds.size(); i++){
			services.add(getService(childIds.get(i)));
		}
		return services;
	}
	public static Tmg getTmg(int tmgId) throws Exception{

		Tmg tmg = null;
		Hashtable<String, String> hash = getObject("tmg", tmgId);
		tmg = new Tmg(tmgId);
		return tmg;
	}
	public static TmgAuthority getTmgAuthority(int tmgAuthorityId) throws Exception{

		TmgAuthority tmgAuthority = null;
		Hashtable<String, String> hash = getObject("tmg_authority", tmgAuthorityId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue authority = new Datavalue(hash.get("authority"));
		tmgAuthority = new TmgAuthority(tmgId, tmgAuthorityId, authority);
		return tmgAuthority;
	}
	public static ArrayList<TmgAuthority> getTmgAuthorityBTmg(int tmgId) throws Exception{
		ArrayList<TmgAuthority> authoritys = new ArrayList<TmgAuthority>();
		ArrayList<Integer> authorityIds = getObjects("tmg_authority", "tmg", tmgId);
		for(int i=0; i<authorityIds.size(); i++){
			authoritys.add(getTmgAuthority(authorityIds.get(i)));
		}
		return authoritys;
	}
	public static TmgContributor getTmgContributor(int tmgContributorId) throws Exception{

		TmgContributor tmgContributor = null;
		Hashtable<String, String> hash = getObject("tmg_contributor", tmgContributorId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue role = new Datavalue(hash.get("role"));
		tmgContributor = new TmgContributor(tmgId, tmgContributorId, name, role);
		return tmgContributor;
	}
	public static ArrayList<TmgContributor> getTmgContributorBTmg(int tmgId) throws Exception{
		ArrayList<TmgContributor> contributors = new ArrayList<TmgContributor>();
		ArrayList<Integer> contributorIds = getObjects("tmg_contributor", "tmg", tmgId);
		for(int i=0; i<contributorIds.size(); i++){
			contributors.add(getTmgContributor(contributorIds.get(i)));
		}
		return contributors;
	}
	public static TmgCreator getTmgCreator(int tmgCreatorId) throws Exception{

		TmgCreator tmgCreator = null;
		Hashtable<String, String> hash = getObject("tmg_creator", tmgCreatorId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		tmgCreator = new TmgCreator(tmgId, tmgCreatorId);
		return tmgCreator;
	}
	public static ArrayList<TmgCreator> getTmgCreatorBTmg(int tmgId) throws Exception{
		ArrayList<TmgCreator> creators = new ArrayList<TmgCreator>();
		ArrayList<Integer> creatorIds = getObjects("tmg_creator", "tmg", tmgId);
		for(int i=0; i<creatorIds.size(); i++){
			creators.add(getTmgCreator(creatorIds.get(i)));
		}
		return creators;
	}
	public static TmgCreatorContact getTmgCreatorContact(int tmgCreatorContactId) throws Exception{

		TmgCreatorContact tmgCreatorContact = null;
		Hashtable<String, String> hash = getObject("tmg_creator_contact", tmgCreatorContactId);
		int tmgCreatorId = Integer.parseInt(hash.get("tmg_creator_id"));
		Datavalue email = new Datavalue(hash.get("email"));
		Datavalue url = new Datavalue(hash.get("url"));
		tmgCreatorContact = new TmgCreatorContact(tmgCreatorId, tmgCreatorContactId, email, url);
		return tmgCreatorContact;
	}
	public static ArrayList<TmgCreatorContact> getTmgCreatorContactBTmgCreator(int tmgCreatorId) throws Exception{
		ArrayList<TmgCreatorContact> contacts = new ArrayList<TmgCreatorContact>();
		ArrayList<Integer> contactIds = getObjects("tmg_creator_contact", "tmg_creator", tmgCreatorId);
		for(int i=0; i<contactIds.size(); i++){
			contacts.add(getTmgCreatorContact(contactIds.get(i)));
		}
		return contacts;
	}
	public static TmgCreatorName getTmgCreatorName(int tmgCreatorNameId) throws Exception{

		TmgCreatorName tmgCreatorName = null;
		Hashtable<String, String> hash = getObject("tmg_creator_name", tmgCreatorNameId);
		int tmgCreatorId = Integer.parseInt(hash.get("tmg_creator_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue vocabulary = new Datavalue(hash.get("vocabulary"));
		tmgCreatorName = new TmgCreatorName(tmgCreatorId, tmgCreatorNameId, value, vocabulary);
		return tmgCreatorName;
	}
	public static ArrayList<TmgCreatorName> getTmgCreatorNameBTmgCreator(int tmgCreatorId) throws Exception{
		ArrayList<TmgCreatorName> names = new ArrayList<TmgCreatorName>();
		ArrayList<Integer> nameIds = getObjects("tmg_creator_name", "tmg_creator", tmgCreatorId);
		for(int i=0; i<nameIds.size(); i++){
			names.add(getTmgCreatorName(nameIds.get(i)));
		}
		return names;
	}
	public static TmgDataformat getTmgDataformat(int tmgDataformatId) throws Exception{

		TmgDataformat tmgDataformat = null;
		Hashtable<String, String> hash = getObject("tmg_dataformat", tmgDataformatId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue dataformat = new Datavalue(hash.get("dataformat"));
		if (dataformat.isNull())
			dataformat = new Datavalue(hash.get("dataformat_nonstandard"));
		tmgDataformat = new TmgDataformat(tmgId, tmgDataformatId, dataformat);
		return tmgDataformat;
	}
	public static ArrayList<TmgDataformat> getTmgDataformatBTmg(int tmgId) throws Exception{
		ArrayList<TmgDataformat> dataformats = new ArrayList<TmgDataformat>();
		ArrayList<Integer> dataformatIds = getObjects("tmg_dataformat", "tmg", tmgId);
		for(int i=0; i<dataformatIds.size(); i++){
			dataformats.add(getTmgDataformat(dataformatIds.get(i)));
		}
		return dataformats;
	}
	public static TmgDatasize getTmgDatasize(int tmgDatasizeId) throws Exception{

		TmgDatasize tmgDatasize = null;
		Hashtable<String, String> hash = getObject("tmg_datasize", tmgDatasizeId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue units = new Datavalue(hash.get("units"));
		if (units.isNull())
			units = new Datavalue(hash.get("units_nonstandard"));
		tmgDatasize = new TmgDatasize(tmgId, tmgDatasizeId, value, units);
		return tmgDatasize;
	}
	public static ArrayList<TmgDatasize> getTmgDatasizeBTmg(int tmgId) throws Exception{
		ArrayList<TmgDatasize> datasizes = new ArrayList<TmgDatasize>();
		ArrayList<Integer> datasizeIds = getObjects("tmg_datasize", "tmg", tmgId);
		for(int i=0; i<datasizeIds.size(); i++){
			datasizes.add(getTmgDatasize(datasizeIds.get(i)));
		}
		return datasizes;
	}
	public static TmgDatatype getTmgDatatype(int tmgDatatypeId) throws Exception{

		TmgDatatype tmgDatatype = null;
		Hashtable<String, String> hash = getObject("tmg_datatype", tmgDatatypeId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue datatype = new Datavalue(hash.get("datatype"));
		if (datatype.isNull())
			datatype = new Datavalue(hash.get("datatype_nonstandard"));
		tmgDatatype = new TmgDatatype(tmgId, tmgDatatypeId, datatype);
		return tmgDatatype;
	}
	public static ArrayList<TmgDatatype> getTmgDatatypeBTmg(int tmgId) throws Exception{
		ArrayList<TmgDatatype> datatypes = new ArrayList<TmgDatatype>();
		ArrayList<Integer> datatypeIds = getObjects("tmg_datatype", "tmg", tmgId);
		for(int i=0; i<datatypeIds.size(); i++){
			datatypes.add(getTmgDatatype(datatypeIds.get(i)));
		}
		return datatypes;
	}
	public static TmgDate getTmgDate(int tmgDateId) throws Exception{

		TmgDate tmgDate = null;
		Hashtable<String, String> hash = getObject("tmg_date", tmgDateId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue format = new Datavalue(hash.get("format"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue dateenum = new Datavalue(hash.get("dateenum"));
		if (dateenum.isNull())
			dateenum = new Datavalue(hash.get("dateenum_nonstandard"));
		tmgDate = new TmgDate(tmgId, tmgDateId, format, value, dateenum);
		return tmgDate;
	}
	public static ArrayList<TmgDate> getTmgDateBTmg(int tmgId) throws Exception{
		ArrayList<TmgDate> dates = new ArrayList<TmgDate>();
		ArrayList<Integer> dateIds = getObjects("tmg_date", "tmg", tmgId);
		for(int i=0; i<dateIds.size(); i++){
			dates.add(getTmgDate(dateIds.get(i)));
		}
		return dates;
	}
	public static TmgDocumentation getTmgDocumentation(int tmgDocumentationId) throws Exception{

		TmgDocumentation tmgDocumentation = null;
		Hashtable<String, String> hash = getObject("tmg_documentation", tmgDocumentationId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue documentationenum = new Datavalue(hash.get("documentationenum"));
		if (documentationenum.isNull())
			documentationenum = new Datavalue(hash.get("documentationenum_nonstandard"));
		tmgDocumentation = new TmgDocumentation(tmgId, tmgDocumentationId, value, documentationenum);
		return tmgDocumentation;
	}
	public static ArrayList<TmgDocumentation> getTmgDocumentationBTmg(int tmgId) throws Exception{
		ArrayList<TmgDocumentation> documentations = new ArrayList<TmgDocumentation>();
		ArrayList<Integer> documentationIds = getObjects("tmg_documentation", "tmg", tmgId);
		for(int i=0; i<documentationIds.size(); i++){
			documentations.add(getTmgDocumentation(documentationIds.get(i)));
		}
		return documentations;
	}
	public static TmgDocumentationNamespace getTmgDocumentationNamespace(int tmgDocumentationNamespaceId) throws Exception{

		TmgDocumentationNamespace tmgDocumentationNamespace = null;
		Hashtable<String, String> hash = getObject("tmg_documentation_namespace", tmgDocumentationNamespaceId);
		int tmgDocumentationId = Integer.parseInt(hash.get("tmg_documentation_id"));
		Datavalue namespace = new Datavalue(hash.get("namespace"));
		tmgDocumentationNamespace = new TmgDocumentationNamespace(tmgDocumentationId, tmgDocumentationNamespaceId, namespace);
		return tmgDocumentationNamespace;
	}
	public static ArrayList<TmgDocumentationNamespace> getTmgDocumentationNamespaceBTmgDocumentation(int tmgDocumentationId) throws Exception{
		ArrayList<TmgDocumentationNamespace> namespaces = new ArrayList<TmgDocumentationNamespace>();
		ArrayList<Integer> namespaceIds = getObjects("tmg_documentation_namespace", "tmg_documentation", tmgDocumentationId);
		for(int i=0; i<namespaceIds.size(); i++){
			namespaces.add(getTmgDocumentationNamespace(namespaceIds.get(i)));
		}
		return namespaces;
	}
	public static TmgDocumentationXlink getTmgDocumentationXlink(int tmgDocumentationXlinkId) throws Exception{

		TmgDocumentationXlink tmgDocumentationXlink = null;
		Hashtable<String, String> hash = getObject("tmg_documentation_xlink", tmgDocumentationXlinkId);
		int tmgDocumentationId = Integer.parseInt(hash.get("tmg_documentation_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue xlink = new Datavalue(hash.get("xlink"));
		if (xlink.isNull())
			xlink = new Datavalue(hash.get("xlink_nonstandard"));
		tmgDocumentationXlink = new TmgDocumentationXlink(tmgDocumentationId, tmgDocumentationXlinkId, value, xlink);
		return tmgDocumentationXlink;
	}
	public static ArrayList<TmgDocumentationXlink> getTmgDocumentationXlinkBTmgDocumentation(int tmgDocumentationId) throws Exception{
		ArrayList<TmgDocumentationXlink> xlinks = new ArrayList<TmgDocumentationXlink>();
		ArrayList<Integer> xlinkIds = getObjects("tmg_documentation_xlink", "tmg_documentation", tmgDocumentationId);
		for(int i=0; i<xlinkIds.size(); i++){
			xlinks.add(getTmgDocumentationXlink(xlinkIds.get(i)));
		}
		return xlinks;
	}
	public static TmgGeospatialcoverage getTmgGeospatialcoverage(int tmgGeospatialcoverageId) throws Exception{

		TmgGeospatialcoverage tmgGeospatialcoverage = null;
		Hashtable<String, String> hash = getObject("tmg_geospatialcoverage", tmgGeospatialcoverageId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue upordown = new Datavalue(hash.get("upordown"));
		if (upordown.isNull())
			upordown = new Datavalue(hash.get("upordown_nonstandard"));
		tmgGeospatialcoverage = new TmgGeospatialcoverage(tmgId, tmgGeospatialcoverageId, upordown);
		return tmgGeospatialcoverage;
	}
	public static ArrayList<TmgGeospatialcoverage> getTmgGeospatialcoverageBTmg(int tmgId) throws Exception{
		ArrayList<TmgGeospatialcoverage> geospatialcoverages = new ArrayList<TmgGeospatialcoverage>();
		ArrayList<Integer> geospatialcoverageIds = getObjects("tmg_geospatialcoverage", "tmg", tmgId);
		for(int i=0; i<geospatialcoverageIds.size(); i++){
			geospatialcoverages.add(getTmgGeospatialcoverage(geospatialcoverageIds.get(i)));
		}
		return geospatialcoverages;
	}
	public static TmgGeospatialcoverageEastwest getTmgGeospatialcoverageEastwest(int tmgGeospatialcoverageEastwestId) throws Exception{

		TmgGeospatialcoverageEastwest tmgGeospatialcoverageEastwest = null;
		Hashtable<String, String> hash = getObject("tmg_geospatialcoverage_eastwest", tmgGeospatialcoverageEastwestId);
		int tmgGeospatialcoverageId = Integer.parseInt(hash.get("tmg_geospatialcoverage_id"));
		Datavalue resolution = new Datavalue(hash.get("resolution"));
		Datavalue size = new Datavalue(hash.get("size"));
		Datavalue start = new Datavalue(hash.get("start"));
		Datavalue units = new Datavalue(hash.get("units"));
		tmgGeospatialcoverageEastwest = new TmgGeospatialcoverageEastwest(tmgGeospatialcoverageId, tmgGeospatialcoverageEastwestId, resolution, size, start, units);
		return tmgGeospatialcoverageEastwest;
	}
	public static ArrayList<TmgGeospatialcoverageEastwest> getTmgGeospatialcoverageEastwestBTmgGeospatialcoverage(int tmgGeospatialcoverageId) throws Exception{
		ArrayList<TmgGeospatialcoverageEastwest> eastwests = new ArrayList<TmgGeospatialcoverageEastwest>();
		ArrayList<Integer> eastwestIds = getObjects("tmg_geospatialcoverage_eastwest", "tmg_geospatialcoverage", tmgGeospatialcoverageId);
		for(int i=0; i<eastwestIds.size(); i++){
			eastwests.add(getTmgGeospatialcoverageEastwest(eastwestIds.get(i)));
		}
		return eastwests;
	}
	public static TmgGeospatialcoverageName getTmgGeospatialcoverageName(int tmgGeospatialcoverageNameId) throws Exception{

		TmgGeospatialcoverageName tmgGeospatialcoverageName = null;
		Hashtable<String, String> hash = getObject("tmg_geospatialcoverage_name", tmgGeospatialcoverageNameId);
		int tmgGeospatialcoverageId = Integer.parseInt(hash.get("tmg_geospatialcoverage_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue vocabulary = new Datavalue(hash.get("vocabulary"));
		tmgGeospatialcoverageName = new TmgGeospatialcoverageName(tmgGeospatialcoverageId, tmgGeospatialcoverageNameId, value, vocabulary);
		return tmgGeospatialcoverageName;
	}
	public static ArrayList<TmgGeospatialcoverageName> getTmgGeospatialcoverageNameBTmgGeospatialcoverage(int tmgGeospatialcoverageId) throws Exception{
		ArrayList<TmgGeospatialcoverageName> names = new ArrayList<TmgGeospatialcoverageName>();
		ArrayList<Integer> nameIds = getObjects("tmg_geospatialcoverage_name", "tmg_geospatialcoverage", tmgGeospatialcoverageId);
		for(int i=0; i<nameIds.size(); i++){
			names.add(getTmgGeospatialcoverageName(nameIds.get(i)));
		}
		return names;
	}
	public static TmgGeospatialcoverageNorthsouth getTmgGeospatialcoverageNorthsouth(int tmgGeospatialcoverageNorthsouthId) throws Exception{

		TmgGeospatialcoverageNorthsouth tmgGeospatialcoverageNorthsouth = null;
		Hashtable<String, String> hash = getObject("tmg_geospatialcoverage_northsouth", tmgGeospatialcoverageNorthsouthId);
		int tmgGeospatialcoverageId = Integer.parseInt(hash.get("tmg_geospatialcoverage_id"));
		Datavalue resolution = new Datavalue(hash.get("resolution"));
		Datavalue size = new Datavalue(hash.get("size"));
		Datavalue start = new Datavalue(hash.get("start"));
		Datavalue units = new Datavalue(hash.get("units"));
		tmgGeospatialcoverageNorthsouth = new TmgGeospatialcoverageNorthsouth(tmgGeospatialcoverageId, tmgGeospatialcoverageNorthsouthId, resolution, size, start, units);
		return tmgGeospatialcoverageNorthsouth;
	}
	public static ArrayList<TmgGeospatialcoverageNorthsouth> getTmgGeospatialcoverageNorthsouthBTmgGeospatialcoverage(int tmgGeospatialcoverageId) throws Exception{
		ArrayList<TmgGeospatialcoverageNorthsouth> northsouths = new ArrayList<TmgGeospatialcoverageNorthsouth>();
		ArrayList<Integer> northsouthIds = getObjects("tmg_geospatialcoverage_northsouth", "tmg_geospatialcoverage", tmgGeospatialcoverageId);
		for(int i=0; i<northsouthIds.size(); i++){
			northsouths.add(getTmgGeospatialcoverageNorthsouth(northsouthIds.get(i)));
		}
		return northsouths;
	}
	public static TmgGeospatialcoverageUpdown getTmgGeospatialcoverageUpdown(int tmgGeospatialcoverageUpdownId) throws Exception{

		TmgGeospatialcoverageUpdown tmgGeospatialcoverageUpdown = null;
		Hashtable<String, String> hash = getObject("tmg_geospatialcoverage_updown", tmgGeospatialcoverageUpdownId);
		int tmgGeospatialcoverageId = Integer.parseInt(hash.get("tmg_geospatialcoverage_id"));
		Datavalue resolution = new Datavalue(hash.get("resolution"));
		Datavalue size = new Datavalue(hash.get("size"));
		Datavalue start = new Datavalue(hash.get("start"));
		Datavalue units = new Datavalue(hash.get("units"));
		tmgGeospatialcoverageUpdown = new TmgGeospatialcoverageUpdown(tmgGeospatialcoverageId, tmgGeospatialcoverageUpdownId, resolution, size, start, units);
		return tmgGeospatialcoverageUpdown;
	}
	public static ArrayList<TmgGeospatialcoverageUpdown> getTmgGeospatialcoverageUpdownBTmgGeospatialcoverage(int tmgGeospatialcoverageId) throws Exception{
		ArrayList<TmgGeospatialcoverageUpdown> updowns = new ArrayList<TmgGeospatialcoverageUpdown>();
		ArrayList<Integer> updownIds = getObjects("tmg_geospatialcoverage_updown", "tmg_geospatialcoverage", tmgGeospatialcoverageId);
		for(int i=0; i<updownIds.size(); i++){
			updowns.add(getTmgGeospatialcoverageUpdown(updownIds.get(i)));
		}
		return updowns;
	}
	public static TmgKeyword getTmgKeyword(int tmgKeywordId) throws Exception{

		TmgKeyword tmgKeyword = null;
		Hashtable<String, String> hash = getObject("tmg_keyword", tmgKeywordId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue vocabulary = new Datavalue(hash.get("vocabulary"));
		tmgKeyword = new TmgKeyword(tmgId, tmgKeywordId, value, vocabulary);
		return tmgKeyword;
	}
	public static ArrayList<TmgKeyword> getTmgKeywordBTmg(int tmgId) throws Exception{
		ArrayList<TmgKeyword> keywords = new ArrayList<TmgKeyword>();
		ArrayList<Integer> keywordIds = getObjects("tmg_keyword", "tmg", tmgId);
		for(int i=0; i<keywordIds.size(); i++){
			keywords.add(getTmgKeyword(keywordIds.get(i)));
		}
		return keywords;
	}
	public static ArrayList<Metadata> getMetadataBTmg(int tmgId) throws Exception{
		ArrayList<Metadata> metadatas = new ArrayList<Metadata>();
		ArrayList<Integer> metadataIds = getObjects("tmg_metadata", "tmg", "metadata", tmgId);
		for(int i=0; i<metadataIds.size(); i++){
			metadatas.add(getMetadata(metadataIds.get(i)));
		}
		return metadatas;
	}
	public static TmgProject getTmgProject(int tmgProjectId) throws Exception{

		TmgProject tmgProject = null;
		Hashtable<String, String> hash = getObject("tmg_project", tmgProjectId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue vocabulary = new Datavalue(hash.get("vocabulary"));
		tmgProject = new TmgProject(tmgId, tmgProjectId, value, vocabulary);
		return tmgProject;
	}
	public static ArrayList<TmgProject> getTmgProjectBTmg(int tmgId) throws Exception{
		ArrayList<TmgProject> projects = new ArrayList<TmgProject>();
		ArrayList<Integer> projectIds = getObjects("tmg_project", "tmg", tmgId);
		for(int i=0; i<projectIds.size(); i++){
			projects.add(getTmgProject(projectIds.get(i)));
		}
		return projects;
	}
	public static TmgProperty getTmgProperty(int tmgPropertyId) throws Exception{

		TmgProperty tmgProperty = null;
		Hashtable<String, String> hash = getObject("tmg_property", tmgPropertyId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue value = new Datavalue(hash.get("value"));
		tmgProperty = new TmgProperty(tmgId, tmgPropertyId, name, value);
		return tmgProperty;
	}
	public static ArrayList<TmgProperty> getTmgPropertyBTmg(int tmgId) throws Exception{
		ArrayList<TmgProperty> propertys = new ArrayList<TmgProperty>();
		ArrayList<Integer> propertyIds = getObjects("tmg_property", "tmg", tmgId);
		for(int i=0; i<propertyIds.size(); i++){
			propertys.add(getTmgProperty(propertyIds.get(i)));
		}
		return propertys;
	}
	public static TmgPublisher getTmgPublisher(int tmgPublisherId) throws Exception{

		TmgPublisher tmgPublisher = null;
		Hashtable<String, String> hash = getObject("tmg_publisher", tmgPublisherId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		tmgPublisher = new TmgPublisher(tmgId, tmgPublisherId);
		return tmgPublisher;
	}
	public static ArrayList<TmgPublisher> getTmgPublisherBTmg(int tmgId) throws Exception{
		ArrayList<TmgPublisher> publishers = new ArrayList<TmgPublisher>();
		ArrayList<Integer> publisherIds = getObjects("tmg_publisher", "tmg", tmgId);
		for(int i=0; i<publisherIds.size(); i++){
			publishers.add(getTmgPublisher(publisherIds.get(i)));
		}
		return publishers;
	}
	public static TmgPublisherContact getTmgPublisherContact(int tmgPublisherContactId) throws Exception{

		TmgPublisherContact tmgPublisherContact = null;
		Hashtable<String, String> hash = getObject("tmg_publisher_contact", tmgPublisherContactId);
		int tmgPublisherId = Integer.parseInt(hash.get("tmg_publisher_id"));
		Datavalue email = new Datavalue(hash.get("email"));
		Datavalue url = new Datavalue(hash.get("url"));
		tmgPublisherContact = new TmgPublisherContact(tmgPublisherId, tmgPublisherContactId, email, url);
		return tmgPublisherContact;
	}
	public static ArrayList<TmgPublisherContact> getTmgPublisherContactBTmgPublisher(int tmgPublisherId) throws Exception{
		ArrayList<TmgPublisherContact> contacts = new ArrayList<TmgPublisherContact>();
		ArrayList<Integer> contactIds = getObjects("tmg_publisher_contact", "tmg_publisher", tmgPublisherId);
		for(int i=0; i<contactIds.size(); i++){
			contacts.add(getTmgPublisherContact(contactIds.get(i)));
		}
		return contacts;
	}
	public static TmgPublisherName getTmgPublisherName(int tmgPublisherNameId) throws Exception{

		TmgPublisherName tmgPublisherName = null;
		Hashtable<String, String> hash = getObject("tmg_publisher_name", tmgPublisherNameId);
		int tmgPublisherId = Integer.parseInt(hash.get("tmg_publisher_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue vocabulary = new Datavalue(hash.get("vocabulary"));
		tmgPublisherName = new TmgPublisherName(tmgPublisherId, tmgPublisherNameId, value, vocabulary);
		return tmgPublisherName;
	}
	public static ArrayList<TmgPublisherName> getTmgPublisherNameBTmgPublisher(int tmgPublisherId) throws Exception{
		ArrayList<TmgPublisherName> names = new ArrayList<TmgPublisherName>();
		ArrayList<Integer> nameIds = getObjects("tmg_publisher_name", "tmg_publisher", tmgPublisherId);
		for(int i=0; i<nameIds.size(); i++){
			names.add(getTmgPublisherName(nameIds.get(i)));
		}
		return names;
	}
	public static TmgServicename getTmgServicename(int tmgServicenameId) throws Exception{

		TmgServicename tmgServicename = null;
		Hashtable<String, String> hash = getObject("tmg_servicename", tmgServicenameId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue servicename = new Datavalue(hash.get("servicename"));
		tmgServicename = new TmgServicename(tmgId, tmgServicenameId, servicename);
		return tmgServicename;
	}
	public static ArrayList<TmgServicename> getTmgServicenameBTmg(int tmgId) throws Exception{
		ArrayList<TmgServicename> servicenames = new ArrayList<TmgServicename>();
		ArrayList<Integer> servicenameIds = getObjects("tmg_servicename", "tmg", tmgId);
		for(int i=0; i<servicenameIds.size(); i++){
			servicenames.add(getTmgServicename(servicenameIds.get(i)));
		}
		return servicenames;
	}
	public static TmgTimecoverage getTmgTimecoverage(int tmgTimecoverageId) throws Exception{

		TmgTimecoverage tmgTimecoverage = null;
		Hashtable<String, String> hash = getObject("tmg_timecoverage", tmgTimecoverageId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue resolution = new Datavalue(hash.get("resolution"));
		tmgTimecoverage = new TmgTimecoverage(tmgId, tmgTimecoverageId, resolution);
		return tmgTimecoverage;
	}
	public static ArrayList<TmgTimecoverage> getTmgTimecoverageBTmg(int tmgId) throws Exception{
		ArrayList<TmgTimecoverage> timecoverages = new ArrayList<TmgTimecoverage>();
		ArrayList<Integer> timecoverageIds = getObjects("tmg_timecoverage", "tmg", tmgId);
		for(int i=0; i<timecoverageIds.size(); i++){
			timecoverages.add(getTmgTimecoverage(timecoverageIds.get(i)));
		}
		return timecoverages;
	}
	public static TmgTimecoverageDuration getTmgTimecoverageDuration(int tmgTimecoverageDurationId) throws Exception{

		TmgTimecoverageDuration tmgTimecoverageDuration = null;
		Hashtable<String, String> hash = getObject("tmg_timecoverage_duration", tmgTimecoverageDurationId);
		int tmgTimecoverageId = Integer.parseInt(hash.get("tmg_timecoverage_id"));
		Datavalue duration = new Datavalue(hash.get("duration"));
		tmgTimecoverageDuration = new TmgTimecoverageDuration(tmgTimecoverageId, tmgTimecoverageDurationId, duration);
		return tmgTimecoverageDuration;
	}
	public static ArrayList<TmgTimecoverageDuration> getTmgTimecoverageDurationBTmgTimecoverage(int tmgTimecoverageId) throws Exception{
		ArrayList<TmgTimecoverageDuration> durations = new ArrayList<TmgTimecoverageDuration>();
		ArrayList<Integer> durationIds = getObjects("tmg_timecoverage_duration", "tmg_timecoverage", tmgTimecoverageId);
		for(int i=0; i<durationIds.size(); i++){
			durations.add(getTmgTimecoverageDuration(durationIds.get(i)));
		}
		return durations;
	}
	public static TmgTimecoverageEnd getTmgTimecoverageEnd(int tmgTimecoverageEndId) throws Exception{

		TmgTimecoverageEnd tmgTimecoverageEnd = null;
		Hashtable<String, String> hash = getObject("tmg_timecoverage_end", tmgTimecoverageEndId);
		int tmgTimecoverageId = Integer.parseInt(hash.get("tmg_timecoverage_id"));
		Datavalue format = new Datavalue(hash.get("format"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue dateenum = new Datavalue(hash.get("dateenum"));
		if (dateenum.isNull())
			dateenum = new Datavalue(hash.get("dateenum_nonstandard"));
		tmgTimecoverageEnd = new TmgTimecoverageEnd(tmgTimecoverageId, tmgTimecoverageEndId, format, value, dateenum);
		return tmgTimecoverageEnd;
	}
	public static ArrayList<TmgTimecoverageEnd> getTmgTimecoverageEndBTmgTimecoverage(int tmgTimecoverageId) throws Exception{
		ArrayList<TmgTimecoverageEnd> ends = new ArrayList<TmgTimecoverageEnd>();
		ArrayList<Integer> endIds = getObjects("tmg_timecoverage_end", "tmg_timecoverage", tmgTimecoverageId);
		for(int i=0; i<endIds.size(); i++){
			ends.add(getTmgTimecoverageEnd(endIds.get(i)));
		}
		return ends;
	}
	public static TmgTimecoverageResolution getTmgTimecoverageResolution(int tmgTimecoverageResolutionId) throws Exception{

		TmgTimecoverageResolution tmgTimecoverageResolution = null;
		Hashtable<String, String> hash = getObject("tmg_timecoverage_resolution", tmgTimecoverageResolutionId);
		int tmgTimecoverageId = Integer.parseInt(hash.get("tmg_timecoverage_id"));
		Datavalue duration = new Datavalue(hash.get("duration"));
		tmgTimecoverageResolution = new TmgTimecoverageResolution(tmgTimecoverageId, tmgTimecoverageResolutionId, duration);
		return tmgTimecoverageResolution;
	}
	public static ArrayList<TmgTimecoverageResolution> getTmgTimecoverageResolutionBTmgTimecoverage(int tmgTimecoverageId) throws Exception{
		ArrayList<TmgTimecoverageResolution> resolutions = new ArrayList<TmgTimecoverageResolution>();
		ArrayList<Integer> resolutionIds = getObjects("tmg_timecoverage_resolution", "tmg_timecoverage", tmgTimecoverageId);
		for(int i=0; i<resolutionIds.size(); i++){
			resolutions.add(getTmgTimecoverageResolution(resolutionIds.get(i)));
		}
		return resolutions;
	}
	public static TmgTimecoverageStart getTmgTimecoverageStart(int tmgTimecoverageStartId) throws Exception{

		TmgTimecoverageStart tmgTimecoverageStart = null;
		Hashtable<String, String> hash = getObject("tmg_timecoverage_start", tmgTimecoverageStartId);
		int tmgTimecoverageId = Integer.parseInt(hash.get("tmg_timecoverage_id"));
		Datavalue format = new Datavalue(hash.get("format"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue dateenum = new Datavalue(hash.get("dateenum"));
		if (dateenum.isNull())
			dateenum = new Datavalue(hash.get("dateenum_nonstandard"));
		tmgTimecoverageStart = new TmgTimecoverageStart(tmgTimecoverageId, tmgTimecoverageStartId, format, value, dateenum);
		return tmgTimecoverageStart;
	}
	public static ArrayList<TmgTimecoverageStart> getTmgTimecoverageStartBTmgTimecoverage(int tmgTimecoverageId) throws Exception{
		ArrayList<TmgTimecoverageStart> starts = new ArrayList<TmgTimecoverageStart>();
		ArrayList<Integer> startIds = getObjects("tmg_timecoverage_start", "tmg_timecoverage", tmgTimecoverageId);
		for(int i=0; i<startIds.size(); i++){
			starts.add(getTmgTimecoverageStart(startIds.get(i)));
		}
		return starts;
	}
	public static TmgVariables getTmgVariables(int tmgVariablesId) throws Exception{

		TmgVariables tmgVariables = null;
		Hashtable<String, String> hash = getObject("tmg_variables", tmgVariablesId);
		int tmgId = Integer.parseInt(hash.get("tmg_id"));
		Datavalue vocabulary = new Datavalue(hash.get("vocabulary"));
		if (vocabulary.isNull())
			vocabulary = new Datavalue(hash.get("vocabulary_nonstandard"));
		tmgVariables = new TmgVariables(tmgId, tmgVariablesId, vocabulary);
		return tmgVariables;
	}
	public static ArrayList<TmgVariables> getTmgVariablesBTmg(int tmgId) throws Exception{
		ArrayList<TmgVariables> variabless = new ArrayList<TmgVariables>();
		ArrayList<Integer> variablesIds = getObjects("tmg_variables", "tmg", tmgId);
		for(int i=0; i<variablesIds.size(); i++){
			variabless.add(getTmgVariables(variablesIds.get(i)));
		}
		return variabless;
	}
	public static TmgVariablesVariable getTmgVariablesVariable(int tmgVariablesVariableId) throws Exception{

		TmgVariablesVariable tmgVariablesVariable = null;
		Hashtable<String, String> hash = getObject("tmg_variables_variable", tmgVariablesVariableId);
		int tmgVariablesId = Integer.parseInt(hash.get("tmg_variables_id"));
		Datavalue name = new Datavalue(hash.get("name"));
		Datavalue units = new Datavalue(hash.get("units"));
		Datavalue vocabularyName = new Datavalue(hash.get("vocabulary_name"));
		tmgVariablesVariable = new TmgVariablesVariable(tmgVariablesId, tmgVariablesVariableId, name, units, vocabularyName);
		return tmgVariablesVariable;
	}
	public static ArrayList<TmgVariablesVariable> getTmgVariablesVariableBTmgVariables(int tmgVariablesId) throws Exception{
		ArrayList<TmgVariablesVariable> variables = new ArrayList<TmgVariablesVariable>();
		ArrayList<Integer> variableIds = getObjects("tmg_variables_variable", "tmg_variables", tmgVariablesId);
		for(int i=0; i<variableIds.size(); i++){
			variables.add(getTmgVariablesVariable(variableIds.get(i)));
		}
		return variables;
	}
	public static TmgVariablesVariablemap getTmgVariablesVariablemap(int tmgVariablesVariablemapId) throws Exception{

		TmgVariablesVariablemap tmgVariablesVariablemap = null;
		Hashtable<String, String> hash = getObject("tmg_variables_variablemap", tmgVariablesVariablemapId);
		int tmgVariablesId = Integer.parseInt(hash.get("tmg_variables_id"));
		Datavalue value = new Datavalue(hash.get("value"));
		Datavalue xlink = new Datavalue(hash.get("xlink"));
		if (xlink.isNull())
			xlink = new Datavalue(hash.get("xlink_nonstandard"));
		tmgVariablesVariablemap = new TmgVariablesVariablemap(tmgVariablesId, tmgVariablesVariablemapId, value, xlink);
		return tmgVariablesVariablemap;
	}
	public static ArrayList<TmgVariablesVariablemap> getTmgVariablesVariablemapBTmgVariables(int tmgVariablesId) throws Exception{
		ArrayList<TmgVariablesVariablemap> variablemaps = new ArrayList<TmgVariablesVariablemap>();
		ArrayList<Integer> variablemapIds = getObjects("tmg_variables_variablemap", "tmg_variables", tmgVariablesId);
		for(int i=0; i<variablemapIds.size(); i++){
			variablemaps.add(getTmgVariablesVariablemap(variablemapIds.get(i)));
		}
		return variablemaps;
	}
